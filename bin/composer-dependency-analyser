#!/usr/bin/env php
<?php declare(strict_types=1);

use Composer\Autoload\ClassLoader;
use ShipMonk\ComposerDependencyAnalyser\Cli;
use ShipMonk\ComposerDependencyAnalyser\Analyser;
use ShipMonk\ComposerDependencyAnalyser\ComposerJson;
use ShipMonk\ComposerDependencyAnalyser\Config\Configuration;
use ShipMonk\ComposerDependencyAnalyser\Config\ErrorType;
use ShipMonk\ComposerDependencyAnalyser\Exception\InvalidCliException;
use ShipMonk\ComposerDependencyAnalyser\Exception\RuntimeException as OurRuntimeException;
use ShipMonk\ComposerDependencyAnalyser\Printer;
use ShipMonk\ComposerDependencyAnalyser\Stopwatch;

error_reporting(E_ALL);
ini_set('display_errors', 'stderr');

$usage = <<<EOD

Usage:
    vendor/bin/composer-analyser

Options:
    --help                      Print this help text and exit.
    --verbose                   Print more usage examples
    --composer-json <path>      Provide custom path to composer.json
    --config <path>             Provide path to php configuration file
                                (must return ShipMonk\ComposerDependencyAnalyser\Config\Configuration instance)

Ignore options:
    (or use --config for better granularity)

    --ignore-unknown-classes            Ignore when class is not found in classmap
    --ignore-unused-deps                Ignore all unused dependency issues
    --ignore-shadow-deps                Ignore all shadow dependency issues
    --ignore-dev-in-prod-deps           Ignore all dev dependency in production code issues
    --ignore-prod-only-in-dev-deps      Ignore all prod dependency used only in dev paths issues


EOD;

$autoloadFiles = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
        break;
    }
}

$cwd = getcwd();
$printer = new Printer($cwd === false ? '' : $cwd);

/**
 * @return never
 */
$exit = static function (string $message) use ($printer): void {
    $printer->printLine("<red>$message</red>" . PHP_EOL);
    exit(255);
};

if ($cwd === false) {
    $exit('Cannot get current working directory');
}
if (!isset($argv)) {
    $exit('No $argv available, possibly disabled register_argc_argv?');
}

try {
    $cli = new Cli();
    $cli->validateArgv($cwd, $argv);
    $providedOptions = $cli->getProvidedOptions();
} catch (InvalidCliException $e) {
    $exit($e->getMessage());
}

if (isset($providedOptions['help'])) {
    echo $usage;
    exit;
}

if (isset($providedOptions['config'])) {
    $configPath = $cwd . "/" . $providedOptions['config'];

    if (!is_file($configPath)) {
        $exit("Invalid config path given, {$configPath} is not a file.");
    }
} else {
    $configPath = $cwd . "/composer-dependency-analyser.php";
}

if (is_file($configPath)) {
    $printer->printLine('<gray>Using config</gray> ' . $configPath);

    try {
        $config = require $configPath;
    } catch (OurRuntimeException $e) {
        $exit($e->getMessage());
    }

    if (!$config instanceof Configuration) {
        $exit("Invalid config file, it must return instance of " . Configuration::class);
    }
} else {
    $config = new Configuration();
}

$ignoreUnknown = isset($providedOptions['ignore-unknown-classes']);
$ignoreUnused = isset($providedOptions['ignore-unused-deps']);
$ignoreShadow = isset($providedOptions['ignore-shadow-deps']);
$ignoreDevInProd = isset($providedOptions['ignore-dev-in-prod-deps']);
$ignoreProdOnlyInDev = isset($providedOptions['ignore-prod-only-in-dev-deps']);

if ($ignoreUnknown) {
    $config->ignoreErrors([ErrorType::UNKNOWN_CLASS]);
}
if ($ignoreUnused) {
    $config->ignoreErrors([ErrorType::UNUSED_DEPENDENCY]);
}
if ($ignoreShadow) {
    $config->ignoreErrors([ErrorType::SHADOW_DEPENDENCY]);
}
if ($ignoreDevInProd) {
    $config->ignoreErrors([ErrorType::DEV_DEPENDENCY_IN_PROD]);
}
if ($ignoreProdOnlyInDev) {
    $config->ignoreErrors([ErrorType::PROD_DEPENDENCY_ONLY_IN_DEV]);
}

$composerJsonPath = isset($providedOptions['composer-json'])
    ? ($cwd . "/" . $providedOptions['composer-json'])
    : ($cwd . "/composer.json");

try {
    $composerJson = new ComposerJson($composerJsonPath);
} catch (OurRuntimeException $e) {
    $exit($e->getMessage());
}

$loaders = ClassLoader::getRegisteredLoaders();
if (count($loaders) !== 1) {
    $exit('This tool works only with single composer autoloader');
}
$vendorDir = key($loaders);

try {
    if ($config->shouldScanComposerAutoloadPaths()) {
        foreach ($composerJson->autoloadPaths as $absolutePath => $isDevPath) {
            $config->addPathToScan($absolutePath, $isDevPath);
        }

        if ($config->getPathsToScan() === []) {
            $exit('No paths to scan! There is no composer autoload section and no extra path to scan configured.');
        }
    } else {
        if ($config->getPathsToScan() === []) {
            $exit('No paths to scan! Scanning composer\'s \'autoload\' sections is disabled and no extra path to scan was configured.');
        }
    }

    $stopwatch = new Stopwatch();
    $analyser = new Analyser($stopwatch, $config, $vendorDir, $composerJson->dependencies);
    $result = $analyser->run();
} catch (OurRuntimeException $e) {
    $exit($e->getMessage());
}

$exitCode = $printer->printResult($result, isset($providedOptions['verbose']), $config->shouldReportUnmatchedIgnoredErrors());
exit($exitCode);


