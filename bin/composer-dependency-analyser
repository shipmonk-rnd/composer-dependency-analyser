#!/usr/bin/env php
<?php declare(strict_types=1);

use ShipMonk\ComposerDependencyAnalyser\Analyser;
use ShipMonk\ComposerDependencyAnalyser\Exception\InvalidCliException;
use ShipMonk\ComposerDependencyAnalyser\Exception\InvalidConfigException;
use ShipMonk\ComposerDependencyAnalyser\Exception\InvalidPathException;
use ShipMonk\ComposerDependencyAnalyser\Initializer;
use ShipMonk\ComposerDependencyAnalyser\Printer;
use ShipMonk\ComposerDependencyAnalyser\Result\ResultFormatter;
use ShipMonk\ComposerDependencyAnalyser\Stopwatch;

error_reporting(E_ALL);
ini_set('display_errors', 'stderr');

$psr4Prefix = 'ShipMonk\\ComposerDependencyAnalyser\\';

// autoloader for own classes (do not rely on presence in composer's autoloader)
spl_autoload_register(static function (string $class) use ($psr4Prefix): void {
    if (strpos($class, $psr4Prefix) === 0) {
        /** @var string $classWithoutPrefix */
        $classWithoutPrefix = substr($class, strlen($psr4Prefix));
        $file = __DIR__ . '/../src/' . str_replace('\\', '/', $classWithoutPrefix) . '.php';
        require $file;
    }
});

/** @var non-empty-string $cwd */
$cwd = getcwd();

$printer = new Printer();
$initializer = new Initializer($cwd, $printer);
$stopwatch = new Stopwatch();

try {
    $options = $initializer->initCliOptions($cwd, $argv);
    $composerJson = $initializer->initComposerJson($cwd, $options);
    $initializer->initComposerAutoloader($composerJson);
    $configuration = $initializer->initConfiguration($options, $composerJson);
    $classLoaders = $initializer->initComposerClassLoaders();

    $analyser = new Analyser($stopwatch, $classLoaders, $configuration, $composerJson->dependencies);
    $result = $analyser->run();

    $formatter = new ResultFormatter($cwd, $printer);
    $exitCode = $formatter->format($result, $options, $configuration);

} catch (
    InvalidPathException |
    InvalidConfigException |
    InvalidCliException $e
) {
    $printer->printLine("\n<red>{$e->getMessage()}</red>" . PHP_EOL);
    exit(255);
}

exit($exitCode);


