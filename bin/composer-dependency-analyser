#!/usr/bin/env php
<?php declare(strict_types=1);

use Composer\Autoload\ClassLoader;
use ShipMonk\Composer\ComposerDependencyAnalyser;
use ShipMonk\Composer\ComposerJson;
use ShipMonk\Composer\Printer;

$usage = <<<EOD

Usage:
    vendor/bin/composer-analyser dir-to-scan

Options:
    --help                      Print this help text and exit.
    --verbose                   Print verbose output
    --ignore-unknown-classes    Ignore when class is not found in classmap
    --composer-json <path>      Provide custom path to composer.json

EOD;

$autoloadFiles = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
        break;
    }
}

$printer = new Printer();

/**
 * @return never
 */
$exit = static function (string $message) use ($printer): void {
    $printer->printLine("<red>$message</red>" . PHP_EOL);
    exit(255);
};

/** @var int $restIndex */
$providedOptions = getopt('', ['help', 'verbose', 'ignore-unknown-classes', 'composer-json:'], $restIndex);

$cwd = getcwd();
$providedPaths = array_slice($argv, $restIndex);

if (isset($providedOptions['help'])) {
    echo $usage;
    exit;
}

$verbose = isset($providedOptions['verbose']);
$ignoreUnknown = isset($providedOptions['ignore-unknown-classes']);

/** @var non-empty-string $cwd */
$cwd = getcwd();

/** @var string[] $providedOptions */
$composerJsonPath = isset($providedOptions['composer-json'])
    ? ($cwd . "/" . $providedOptions['composer-json'])
    : ($cwd . "/composer.json");

if (!is_file($composerJsonPath)) {
    $exit("File composer.json not found, $composerJsonPath is not a file.");
}

$composerJsonRawData = file_get_contents($composerJsonPath);

if ($composerJsonRawData === false) {
    $exit("Failure while reading $composerJsonPath file.");
}

$composerJsonData = json_decode($composerJsonRawData, true);

$jsonError = json_last_error();

if ($jsonError !== JSON_ERROR_NONE) {
    $exit("Failure while parsing $composerJsonPath file: " . json_last_error_msg());
}

$composerJson = new ComposerJson($composerJsonData); // @phpstan-ignore-line ignore mixed given

if (count($composerJson->dependencies) === 0) {
    $exit("No packages found in $composerJsonPath file.");
}

$loaders = ClassLoader::getRegisteredLoaders();
if (count($loaders) !== 1) {
    $exit('This tool works only with single composer autoloader');
}
$vendorDir = key($loaders);

if (!$loaders[$vendorDir]->isClassMapAuthoritative()) {
    $exit('Run \'composer dump-autoload --classmap-authoritative\' first');
}

$absolutePaths = [];
foreach ($composerJson->autoloadPaths as $relativePath => $isDevPath) {
    $absolutePath = dirname($composerJsonPath) . '/' . $relativePath;
    if (!is_dir($absolutePath) && !is_file($absolutePath)) {
        $exit("Unexpected path detected, $absolutePath is not a file nor directory.");
    }
    $absolutePaths[$absolutePath] = $isDevPath;
}

$detector = new ComposerDependencyAnalyser($vendorDir, $loaders[$vendorDir]->getClassMap(), $composerJson->dependencies, ['php']);
$errors = $detector->scan($absolutePaths);

$exitCode = $printer->printResult(array_values($errors), $ignoreUnknown, $verbose);
exit($exitCode);


