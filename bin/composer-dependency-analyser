#!/usr/bin/env php
<?php declare(strict_types=1);

use Composer\Autoload\ClassLoader;
use ShipMonk\Composer\ComposerDependencyAnalyser;
use ShipMonk\Composer\ComposerJson;
use ShipMonk\Composer\Config\Configuration;
use ShipMonk\Composer\Config\ErrorType;
use ShipMonk\Composer\Printer;

$usage = <<<EOD

Usage:
    vendor/bin/composer-analyser

Options:
    --help                      Print this help text and exit.
    --verbose                   Print more usage examples
    --ignore-unknown-classes    Ignore when class is not found in classmap
    --composer-json <path>      Provide custom path to composer.json
    --config <path>             Provide path to php configuration file
                                (must return ShipMonk\Composer\Config\Configuration instance)

EOD;

$autoloadFiles = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
        break;
    }
}

$printer = new Printer();

/**
 * @return never
 */
$exit = static function (string $message) use ($printer): void {
    $printer->printLine("<red>$message</red>" . PHP_EOL);
    exit(255);
};

/** @var string[] $providedOptions */
$providedOptions = getopt('', ['help', 'verbose', 'ignore-unknown-classes', 'composer-json:', 'config:'], $restIndex);

/** @var int $restIndex */
$providedPaths = array_slice($argv, $restIndex);
$cwd = getcwd();

if (isset($providedOptions['help'])) {
    echo $usage;
    exit;
}

if (isset($providedOptions['config'])) {
    $printer->printLine('Using config ' . $providedOptions['config'] . PHP_EOL);

    $configPath = $cwd . "/" . $providedOptions['config'];
    if (!is_file($configPath)) {
        $exit("Invalid config path given, {$providedOptions['config']} is not a file.");
    }

    $config = require $configPath;

    if (!$config instanceof Configuration) {
        $exit("Invalid config file, must return instance of " . Configuration::class);
    }
} else {
    $config = new Configuration();
}

$ignoreUnknown = isset($providedOptions['ignore-unknown-classes']);

if ($ignoreUnknown) {
    $config->ignoreErrors([ErrorType::UNKNOWN_CLASS]);
}

/** @var non-empty-string $cwd */
$cwd = getcwd();

$composerJsonPath = isset($providedOptions['composer-json'])
    ? ($cwd . "/" . $providedOptions['composer-json'])
    : ($cwd . "/composer.json");

if (!is_file($composerJsonPath)) {
    $exit("File composer.json not found, $composerJsonPath is not a file.");
}

$composerJsonRawData = file_get_contents($composerJsonPath);

if ($composerJsonRawData === false) {
    $exit("Failure while reading $composerJsonPath file.");
}

$composerJsonData = json_decode($composerJsonRawData, true);

$jsonError = json_last_error();

if ($jsonError !== JSON_ERROR_NONE) {
    $exit("Failure while parsing $composerJsonPath file: " . json_last_error_msg());
}

$composerJson = new ComposerJson($composerJsonData); // @phpstan-ignore-line ignore mixed given

if (count($composerJson->dependencies) === 0) {
    $exit("No packages found in $composerJsonPath file.");
}

$loaders = ClassLoader::getRegisteredLoaders();
if (count($loaders) !== 1) {
    $exit('This tool works only with single composer autoloader');
}
$vendorDir = key($loaders);

if (!$loaders[$vendorDir]->isClassMapAuthoritative()) {
    $exit('Run \'composer dump-autoload --classmap-authoritative\' first');
}

if ($config->shouldScanComposerAutoloadPaths()) {
    foreach ($composerJson->autoloadPaths as $relativePath => $isDevPath) {
        $absolutePath = dirname($composerJsonPath) . '/' . $relativePath;
        $config->addPathToScan($absolutePath, $isDevPath);
    }

    if ($config->getPathsToScan() === []) {
        $exit('No paths to scan! There is no composer autoload section and no extra path to scan configured.');
    }
} else {
    if ($config->getPathsToScan() === []) {
        $exit('No paths to scan! Scanning composer\'s \'autoload\' sections is disabled and no extra path to scan was configured.');
    }
}

foreach ($config->getPathsToScan() as $pathToScan) {
    if (!is_dir($pathToScan->getPath()) && !is_file($pathToScan->getPath())) {
        $exit("Invalid scan path given, {$pathToScan->getPath()} is not a file nor directory.");
    }
}

foreach ($config->getPathsToExclude() as $pathToExclude) {
    if (!is_dir($pathToExclude) && !is_file($pathToExclude)) {
        $exit("Invalid exclude path given, {$pathToExclude} is not a file nor directory.");
    }
}

foreach ($config->getPathsWithIgnore() as $pathWithIgnore) {
    if (!is_dir($pathWithIgnore) && !is_file($pathWithIgnore)) {
        $exit("Invalid ignore path given, {$pathWithIgnore} is not a file nor directory.");
    }
}

$analyser = new ComposerDependencyAnalyser($config, $vendorDir, $loaders[$vendorDir]->getClassMap(), $composerJson->dependencies);
$result = $analyser->run();

$exitCode = $printer->printResult($result, isset($providedOptions['verbose']));
exit($exitCode);


