#!/usr/bin/env php
<?php declare(strict_types=1);

use Composer\Autoload\ClassLoader;
use ShipMonk\Composer\ShadowDependencyDetector;

$usage = <<<EOD

Usage:
    vendor/bin/composer-analyser dir-to-scan

Options:
    --help                      Print this help text and exit.
    --composer_json <path>      Provide custom path to composer.json

EOD;

$autoloadFiles = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
        break;
    }
}

/**
 * @return never
 */
$exit = static function (string $message): void {
    echo "ERROR: $message" . PHP_EOL . PHP_EOL;
    exit(255);
};

/** @var int $restIndex */
$providedOptions = getopt('', ['help', 'composer_json:'], $restIndex);

$cwd = getcwd();
$relativePaths = array_slice($argv, $restIndex);

if (isset($providedOptions['help'])) {
    echo $usage;
    exit;
}

if ($relativePaths === []) {
    $exit("No paths given to scan.");
}

/** @var non-empty-string $cwd */
$cwd = getcwd();

/** @var string[] $providedOptions */
$composerJsonPath = isset($providedOptions['composer_json'])
    ? ($cwd . "/" . $providedOptions['composer_json'])
    : ($cwd . "/composer.json");

if (!is_file($composerJsonPath)) {
    $exit("File composer.json not found, $composerJsonPath is not a file.");
}

$composerJsonRawData = file_get_contents($composerJsonPath);

if ($composerJsonRawData === false) {
    $exit("Failure while reading $composerJsonPath file.");
}

/** @var array{require?: array<string, string>, require-dev?: array<string, string>} $composerJsonData */
$composerJsonData = json_decode($composerJsonRawData, true);

$jsonError = json_last_error();

if ($jsonError !== JSON_ERROR_NONE) {
    $exit("Failure while parsing $composerJsonPath file: " . json_last_error_msg());
}

$filterPackages = static function (string $package): bool {
    return strpos($package, '/') !== false;
};

$requiredPackages = $composerJsonData['require'] ?? [];
$requiredDevPackages = $composerJsonData['require-dev'] ?? [];

if (count($requiredPackages) === 0 && count($requiredDevPackages) === 0) {
    $exit("No packages found in $composerJsonPath file.");
}

$dependencies = array_merge(
    array_fill_keys(array_keys(array_filter($requiredPackages, $filterPackages, ARRAY_FILTER_USE_KEY)), false),
    array_fill_keys(array_keys($requiredDevPackages), true)
);

$loaders = ClassLoader::getRegisteredLoaders();
if (count($loaders) !== 1) {
    $exit('This tool works only with single composer autoloader');
}
$vendorDir = key($loaders);

if (!$loaders[$vendorDir]->isClassMapAuthoritative()) {
    $exit('Run \'composer dump-autoload --classmap-authoritative\' first');
}

$absolutePaths = [];
foreach ($relativePaths as $relativePath) {
    $absolutePath = $cwd . '/' . $relativePath;
    if (!is_dir($absolutePath) && !is_file($absolutePath)) {
        $exit("Invalid path given, $absolutePath is not a directory.");
    }
    $absolutePaths[] = $absolutePath;
}

$detector = new ShadowDependencyDetector($vendorDir, $loaders[$vendorDir]->getClassMap(), $dependencies, ['php']);
$errors = $detector->scan($absolutePaths);

if (count($errors) > 0) {
    $exit(implode(PHP_EOL, $errors) . PHP_EOL);

} else {
    echo "No shadow dependencies found" . PHP_EOL;
}
